'use strict';

goog.require('my.first.module');
goog.require('my.second.module');
goog.require('my.third.module');

goog.require('my.version.Directive.factory');
goog.require('my.version.Service');
goog.require('my.check.Filter.factory');

/**
 * Main app.
 */
angular.module('app', [
  'ngLocale',
  'ngSanitize',
  'ngCookies',
  'ngResource',
  'ui.router',
  'ui.bootstrap',
  'pascalprecht.translate',
  'tmh.dynamicLocale',
  'chieffancypants.loadingBar',
  my.first.module.name,
  my.second.module.name,
  // my.third.module includes child states `third.one` and `third.two`
  my.third.module.name
])
.config(config)
.directive('version', my.version.Directive.factory)
.service('version', my.version.Service)
.filter('check', my.check.Filter.factory);

/**
 * Configuration function.
 *
 * @param {ng.$logProvider} $logProvider
 * @param {ui.router.$stateProvider} $stateProvider
 * @param {ui.router.$urlRouterProvider} $urlRouterProvider
 * @param {pascalprecht.translate.$translateProvider} $translateProvider
 * @param {tmh.dynamicLocale.tmhDynamicLocaleProvider} tmhDynamicLocaleProvider
 * @param {chieffancypants.loadingBar.cfpLoadingBarProvider} cfpLoadingBarProvider
 * @param {app.lsAppConfig} lsAppConfig
 * @ngInject
 */
//function config($logProvider, $stateProvider, $urlRouterProvider, $translateProvider, tmhDynamicLocaleProvider, cfpLoadingBarProvider, lsAppConfig) {
function config($logProvider, $stateProvider, $urlRouterProvider) {

  //var debug = document.cookie.linshareDebug || lsAppConfig.debug;
  $logProvider.debugEnabled(true);

  $urlRouterProvider.otherwise('/upload_request');

  //$translateProvider.useStaticFilesLoader({
  //  prefix: 'i18n/locale-',
  //  suffix: '.json'
  //});
  //$translateProvider.preferredLanguage('en');
  //$translateProvider.addInterpolation('$translateMessageFormatInterpolation');
  //$translateProvider.useMissingTranslationHandlerLog();
  //$translateProvider.useCookieStorage();

  //tmhDynamicLocaleProvider.localeLocationPattern('i18n/angular/angular-locale_{{locale}}.js');

  //cfpLoadingBarProvider.includeSpinner = false;

}
